import asyncio
import os

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardRemove
)
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.future import select
from sqlalchemy.orm import sessionmaker
from database import Master
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN2")
if not API_TOKEN:
    raise ValueError("Telegram bot token is not found in environment variables")

# –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–µ—Å—Å–∏—é
engine = create_async_engine('sqlite+aiosqlite:///database.db', echo=True)
async_session_maker = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
async def get_username_by_telegram_id(telegram_id):
    async with Bot(token=API_TOKEN) as master_bot:
        try:
            chat = await master_bot.get_chat_member(telegram_id, telegram_id)
            return chat.user.first_name if chat.user.first_name else chat.user.username if chat.user.username else str(telegram_id)
        except Exception as e:
            return str(telegram_id)

async def get_telegram_id_by_master_id(master_id):
    async with async_session_maker() as session:
        try:
            result = await session.execute(
                select(Master).filter(Master.id == master_id)
            )
            master = result.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é) –∑–∞–ø–∏—Å—å

            if master:
                return master.telegram_id
            else:
                return None
        except Exception as e:
            return None

async def insertion_send_telegram_notification(master_id, user_telegram_id, booking_data):
    async with Bot(token=API_TOKEN) as master_bot:
        master_telegram_id = await get_telegram_id_by_master_id(master_id)
        name = await get_username_by_telegram_id(user_telegram_id)
        message = (
            f"–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ {booking_data['slot_time'].strftime('%d-%m %H:%M')}\n"  
            f"–£—Å–ª—É–≥–∞: {booking_data['service_name']}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {name}"
        )
        try:
            await master_bot.send_message(chat_id=master_telegram_id, text=message)
        except Exception as e:
            pass

async def delete_send_telegram_notification(master_telegram_id, user_id, booking_data):
    async with Bot(token=API_TOKEN) as master_bot:
        name = await get_username_by_telegram_id(user_id)
        message = (
            f"–£ –≤–∞—Å –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ {booking_data['slot_time'].strftime('%d-%m %H:%M')}\n" 
            f"–£—Å–ª—É–≥–∞: {booking_data['service_name']}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {name}"
        )
        try:
            await master_bot.send_message(chat_id=master_telegram_id, text=message)
        except Exception as e:
            pass

async def start_polling(dp, master_bot):
    try:
        await dp.start_polling(master_bot)
    finally:
        await master_bot.close()
        await master_bot.session.close()

async def main():
    async with Bot(token=API_TOKEN) as master_bot:
        dp = Dispatcher()

        @dp.message(Command("start"))
        async def cmd_start(message: Message):
            async with async_session_maker() as session:
                try:
                    result = await session.execute(
                        select(Master).filter(Master.telegram_id == message.from_user.id)
                    )
                    master = result.scalars().first()
                    if master:
                        keyboard = ReplyKeyboardMarkup(
                            keyboard=[[KeyboardButton(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–ø–∏—Å—è–º")]],
                            resize_keyboard=True
                        )
                        await message.answer(
                            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {master.name}! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞—Å—Ç–µ—Ä–æ–≤. "
                            "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –º–µ–Ω—è –∫ —Å–≤–æ–∏–º –∑–∞–ø–∏—Å—è–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π! üíã",
                            reply_markup=keyboard
                        )
                    else:
                        await message.answer(
                            "–ö–∞–∂–µ—Ç—Å—è, –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –º–∞—Å—Ç–µ—Ä–æ–º, "
                            "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–∞–ª–æ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ @HseKrasotaBot ‚ù§Ô∏è"
                        )
                except Exception as e:
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")

        @dp.message(F.text == "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–ø–∏—Å—è–º")
        async def connect_to_records(message: Message):
            async with async_session_maker() as session:
                try:
                    result = await session.execute(
                        select(Master).filter(Master.telegram_id == message.from_user.id)
                    )
                    master = result.scalars().first()
                    if master:
                        master.notifications_enabled = True
                        await session.commit()
                        await message.answer(
                            "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º –æ –∑–∞–ø–∏—Å—è—Ö!",
                            reply_markup=ReplyKeyboardRemove()
                        )
                    else:
                        await message.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
                except Exception as e:
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∑–∞–ø–∏—Å—è–º.")

        @dp.message()
        async def handle_unknown_message(message: Message):
            await message.answer(
                "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –µ—â–µ –Ω–µ –Ω–∞—É—á–∏–ª—Å—è –ø–æ–Ω–∏–º–∞—Ç—å –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –∑–∞—Ç–æ —è –º–æ–≥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –í–∞—Å –æ –∑–∞–ø–∏—Å—è—Ö!"
            )

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await start_polling(dp, master_bot)

if __name__ == '__main__':
    asyncio.run(main())
